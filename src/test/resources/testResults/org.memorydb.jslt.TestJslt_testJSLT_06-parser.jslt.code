name=id, alternatives=[
  nr=0, parameters=[
    type=ARRAY, marray=[
      type=MULTIPLE, mmatch=[
        type=MACRO, macro={Name=wstoken}, mparms=[
        ]
      ], mmin=0, mmax=-1
      variable=[
        name=i, nr=0, type=NULL
      ], type=ARRAY, marray=[
        type=MACRO, macro={Name=idfirst}, mparms=[
        ]
        type=MULTIPLE, mmatch=[
          type=MACRO, macro={Name=idnext}, mparms=[
          ]
        ], mmin=0, mmax=-1
      ]
    ]
  ], anyParm=false, code=[
    operation=VARIABLE, varName=i, varNr=0
  ]
], matching=[
  type=TEST_STACK, tstack=1, tsfalse=12
  type=STACK, stack=1
  type=PARM, parm=0, pfalse=12
  type=STEP, step=START, missed=12
  type=PUSH, pushpos=0
  type=JUMP, jump=CALL, position=10
  type=POP, poppos=0, popread=true
  type=CALL, macro={Name=wstoken}, parms=[
  ], mfalse=12
  type=STEP, step=FORWARD, missed=12
  type=JUMP, jump=CONTINUE, position=4
  type=VAR_WRITE, vwrite=[
    name=i, nr=0, type=NULL
  ], vwrange=-1
  type=ALT, altnr=2112, afalse=12
  type=JUMP, jump=MISS
]
name=idfirst, alternatives=[
  nr=0, parameters=[
    variable=[
      name=x, nr=0, type=NULL
    ], type=ANY
  ], anyParm=false, if=[
    operation=FUNCTION, function=OR, fnParm1=[
      operation=FUNCTION, function=OR, fnParm1=[
        operation=FUNCTION, function=AND, fnParm1=[
          operation=FUNCTION, function=GT, fnParm1=[
            operation=VARIABLE, varName=x, varNr=0
          ], fnParm2=[
            operation=STRING, string=a
          ]
        ], fnParm2=[
          operation=FUNCTION, function=LT, fnParm1=[
            operation=VARIABLE, varName=x, varNr=0
          ], fnParm2=[
            operation=STRING, string=z
          ]
        ]
      ], fnParm2=[
        operation=FUNCTION, function=AND, fnParm1=[
          operation=FUNCTION, function=GT, fnParm1=[
            operation=VARIABLE, varName=x, varNr=0
          ], fnParm2=[
            operation=STRING, string=A
          ]
        ], fnParm2=[
          operation=FUNCTION, function=LT, fnParm1=[
            operation=VARIABLE, varName=x, varNr=0
          ], fnParm2=[
            operation=STRING, string=Z
          ]
        ]
      ]
    ], fnParm2=[
      operation=FUNCTION, function=EQ, fnParm1=[
        operation=VARIABLE, varName=x, varNr=0
      ], fnParm2=[
        operation=STRING, string=_
      ]
    ]
  ], code=[
    operation=VARIABLE, varName=x, varNr=0
  ]
], matching=[
  type=TEST_STACK, tstack=1, tsfalse=2
  type=ALT, altnr=1011, afalse=2
  type=JUMP, jump=MISS
]
name=idnext, alternatives=[
  nr=0, parameters=[
    variable=[
      name=x, nr=0, type=NULL
    ], type=ANY
  ], anyParm=false, if=[
    operation=FUNCTION, function=OR, fnParm1=[
      operation=CALL, macro={Name=nrtoken}, callParms=[
        operation=VARIABLE, varName=x, varNr=0
      ]
    ], fnParm2=[
      operation=CALL, macro={Name=idfirst}, callParms=[
        operation=VARIABLE, varName=x, varNr=0
      ]
    ]
  ], code=[
    operation=VARIABLE, varName=x, varNr=0
  ]
], matching=[
  type=TEST_STACK, tstack=1, tsfalse=2
  type=ALT, altnr=1845, afalse=2
  type=JUMP, jump=MISS
]
name=main, alternatives=[
  nr=0, parameters=[
  ], anyParm=false, code=[
    operation=FUNCTION, function=ADD, fnParm1=[
      operation=FUNCTION, function=ADD, fnParm1=[
        operation=FUNCTION, function=ADD, fnParm1=[
          operation=FUNCTION, function=ADD, fnParm1=[
            operation=FUNCTION, function=ADD, fnParm1=[
              operation=FUNCTION, function=ADD, fnParm1=[
                operation=FUNCTION, function=ADD, fnParm1=[
                  operation=FUNCTION, function=ADD, fnParm1=[
                    operation=FUNCTION, function=ADD, fnParm1=[
                      operation=CALL, macro={Name=t.assert}, callParms=[
                        operation=STRING, string=whitespace
                        operation=BOOLEAN, boolean=true
                        operation=CALL, macro={Name=token}, callParms=[
                          operation=STRING, string=(
                          operation=STRING, string=  (
                        ]
                      ]
                    ], fnParm2=[
                      operation=CALL, macro={Name=t.assert}, callParms=[
                        operation=STRING, string=token
                        operation=BOOLEAN, boolean=true
                        operation=CALL, macro={Name=token}, callParms=[
                          operation=STRING, string=(
                          operation=STRING, string= (
                        ]
                      ]
                    ]
                  ], fnParm2=[
                    operation=CALL, macro={Name=t.assert}, callParms=[
                      operation=STRING, string=unmatched
                      operation=NULL
                      operation=CALL, macro={Name=token}, callParms=[
                        operation=STRING, string=(.
                        operation=STRING, string=  (
                      ]
                    ]
                  ]
                ], fnParm2=[
                  operation=CALL, macro={Name=t.assert}, callParms=[
                    operation=STRING, string=id
                    operation=STRING, string=hi_ho
                    operation=CALL, macro={Name=id}, callParms=[
                      operation=STRING, string=  hi_ho
                    ]
                  ]
                ]
              ], fnParm2=[
                operation=CALL, macro={Name=t.assert}, callParms=[
                  operation=STRING, string=id2
                  operation=STRING, string=hi2
                  operation=CALL, macro={Name=id}, callParms=[
                    operation=STRING, string=hi2
                  ]
                ]
              ]
            ], fnParm2=[
              operation=CALL, macro={Name=t.assert}, callParms=[
                operation=STRING, string=not id
                operation=NULL
                operation=CALL, macro={Name=id}, callParms=[
                  operation=STRING, string=2hi
                ]
              ]
            ]
          ], fnParm2=[
            operation=CALL, macro={Name=t.assert}, callParms=[
              operation=STRING, string=number
              operation=NUMBER, number=1234
              operation=CALL, macro={Name=numb}, callParms=[
                operation=STRING, string= 1234
              ]
            ]
          ]
        ], fnParm2=[
          operation=CALL, macro={Name=t.assert}, callParms=[
            operation=STRING, string=negative
            operation=NUMBER, number=-1234
            operation=CALL, macro={Name=numb}, callParms=[
              operation=STRING, string= -1234
            ]
          ]
        ]
      ], fnParm2=[
        operation=CALL, macro={Name=t.assert}, callParms=[
          operation=STRING, string=not number
          operation=NULL
          operation=CALL, macro={Name=numb}, callParms=[
            operation=STRING, string= 1234 
          ]
        ]
      ]
    ], fnParm2=[
      operation=CALL, macro={Name=t.assert}, callParms=[
        operation=STRING, string=double negative
        operation=NULL
        operation=CALL, macro={Name=numb}, callParms=[
          operation=STRING, string=--1234
        ]
      ]
    ]
  ]
], matching=[
  type=TEST_STACK, tstack=0, tsfalse=2
  type=ALT, altnr=3051, afalse=2
  type=JUMP, jump=MISS
]
name=nrtoken, alternatives=[
  nr=0, parameters=[
    variable=[
      name=x, nr=0, type=NULL
    ], type=ANY
  ], anyParm=false, if=[
    operation=FUNCTION, function=AND, fnParm1=[
      operation=FUNCTION, function=GT, fnParm1=[
        operation=VARIABLE, varName=x, varNr=0
      ], fnParm2=[
        operation=STRING, string=0
      ]
    ], fnParm2=[
      operation=FUNCTION, function=LT, fnParm1=[
        operation=VARIABLE, varName=x, varNr=0
      ], fnParm2=[
        operation=STRING, string=9
      ]
    ]
  ], code=[
    operation=VARIABLE, varName=x, varNr=0
  ]
], matching=[
  type=TEST_STACK, tstack=1, tsfalse=2
  type=ALT, altnr=1560, afalse=2
  type=JUMP, jump=MISS
]
name=numb, alternatives=[
  nr=0, parameters=[
    type=ARRAY, marray=[
      type=MULTIPLE, mmatch=[
        type=MACRO, macro={Name=wstoken}, mparms=[
        ]
      ], mmin=0, mmax=-1
      variable=[
        name=n, nr=0, type=NULL
      ], type=ARRAY, marray=[
        type=MULTIPLE, mmatch=[
          type=STRING, string=-
        ], mmin=0, mmax=1
        type=MACRO, macro={Name=nrtoken}, mparms=[
        ]
        type=MULTIPLE, mmatch=[
          type=MACRO, macro={Name=nrtoken}, mparms=[
          ]
        ], mmin=0, mmax=-1
      ]
    ]
  ], anyParm=false, code=[
    operation=FUNCTION, function=NUMBER, fnParm1=[
      operation=VARIABLE, varName=n, varNr=0
    ]
  ]
], matching=[
  type=TEST_STACK, tstack=1, tsfalse=12
  type=STACK, stack=1
  type=PARM, parm=0, pfalse=12
  type=STEP, step=START, missed=12
  type=PUSH, pushpos=0
  type=JUMP, jump=CALL, position=10
  type=POP, poppos=0, popread=true
  type=CALL, macro={Name=wstoken}, parms=[
  ], mfalse=12
  type=STEP, step=FORWARD, missed=12
  type=JUMP, jump=CONTINUE, position=4
  type=VAR_WRITE, vwrite=[
    name=n, nr=0, type=NULL
  ], vwrange=-1
  type=ALT, altnr=2439, afalse=12
  type=JUMP, jump=MISS
]
name=slice, alternatives=[
], matching=[
  type=JUMP, jump=MISS
]
name=t.assert, alternatives=[
  nr=0, parameters=[
    variable=[
      name=name, nr=0, type=STRING
    ], type=ANY
    variable=[
      name=should, nr=1, type=NULL
    ], type=ANY
    variable=[
      name=was, nr=2, type=NULL
    ], type=ANY
  ], anyParm=false, code=[
    operation=CONDITION, conExpr=[
      operation=FUNCTION, function=EQ, fnParm1=[
        operation=VARIABLE, varName=should, varNr=1
      ], fnParm2=[
        operation=VARIABLE, varName=was, varNr=2
      ]
    ], conTrue=[
      operation=STRING, string=
    ], conFalse=[
      operation=FUNCTION, function=ADD, fnParm1=[
        operation=FUNCTION, function=ADD, fnParm1=[
          operation=FUNCTION, function=ADD, fnParm1=[
            operation=FUNCTION, function=ADD, fnParm1=[
              operation=FUNCTION, function=ADD, fnParm1=[
                operation=VARIABLE, varName=name, varNr=0
              ], fnParm2=[
                operation=STRING, string= was '
              ]
            ], fnParm2=[
              operation=VARIABLE, varName=was, varNr=2
            ]
          ], fnParm2=[
            operation=STRING, string=' should '
          ]
        ], fnParm2=[
          operation=VARIABLE, varName=should, varNr=1
        ]
      ], fnParm2=[
        operation=STRING, string=
          '
      ]
    ]
  ]
], matching=[
  type=TEST_STACK, tstack=3, tsfalse=4
  type=PARM, parm=0, pfalse=4
  type=TEST_TYPE, ttype=TYPE_STRING, ttfalse=4
  type=ALT, altnr=55, afalse=4
  type=JUMP, jump=MISS
]
name=token, alternatives=[
  nr=0, parameters=[
    variable=[
      name=tok, nr=0, type=NULL
    ], type=ANY
    type=ARRAY, marray=[
      type=MULTIPLE, mmatch=[
        type=MACRO, macro={Name=wstoken}, mparms=[
        ]
      ], mmin=0, mmax=-1
      type=CONSTANT, cparm=tok, constant=0
    ]
  ], anyParm=false, code=[
    operation=BOOLEAN, boolean=true
  ]
], matching=[
  type=TEST_STACK, tstack=2, tsfalse=14
  type=PARM, parm=1, pfalse=14
  type=STEP, step=START, missed=14
  type=PUSH, pushpos=0
  type=JUMP, jump=CALL, position=9
  type=POP, poppos=0, popread=true
  type=CALL, macro={Name=wstoken}, parms=[
  ], mfalse=14
  type=STEP, step=FORWARD, missed=14
  type=JUMP, jump=CONTINUE, position=3
  type=TEST_PARM, tparm=0, tpfalse=14
  type=STEP, step=FORWARD, missed=12
  type=JUMP, jump=CONTINUE, position=14
  type=STACK, stack=2
  type=ALT, altnr=2805, afalse=14
  type=JUMP, jump=MISS
]
name=wstoken, alternatives=[
  nr=0, parameters=[
    variable=[
      name=x, nr=0, type=NULL
    ], type=ANY
  ], anyParm=false, if=[
    operation=FUNCTION, function=OR, fnParm1=[
      operation=FUNCTION, function=OR, fnParm1=[
        operation=FUNCTION, function=OR, fnParm1=[
          operation=FUNCTION, function=EQ, fnParm1=[
            operation=VARIABLE, varName=x, varNr=0
          ], fnParm2=[
            operation=STRING, string= 
          ]
        ], fnParm2=[
          operation=FUNCTION, function=EQ, fnParm1=[
            operation=VARIABLE, varName=x, varNr=0
          ], fnParm2=[
            operation=STRING, string=\t
          ]
        ]
      ], fnParm2=[
        operation=FUNCTION, function=EQ, fnParm1=[
          operation=VARIABLE, varName=x, varNr=0
        ], fnParm2=[
          operation=STRING, string=\r
        ]
      ]
    ], fnParm2=[
      operation=FUNCTION, function=EQ, fnParm1=[
        operation=VARIABLE, varName=x, varNr=0
      ], fnParm2=[
        operation=STRING, string=
          
      ]
    ]
  ], code=[
    operation=VARIABLE, varName=x, varNr=0
  ]
], matching=[
  type=TEST_STACK, tstack=1, tsfalse=2
  type=ALT, altnr=550, afalse=2
  type=JUMP, jump=MISS
]
