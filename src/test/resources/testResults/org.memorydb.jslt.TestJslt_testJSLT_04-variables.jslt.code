name=_1data, alternatives=[
  nr=0, parameters=[
    variable=[
      name=x, nr=0, type=NULL
    ], type=STRING, string=abcd
  ], anyParm=false, code=[
    operation=VARIABLE, varName=x, varNr=0
  ]
], matching=[
  type=TEST_STACK, tstack=1, tsfalse=6
  type=STACK, stack=1
  type=PARM, parm=0, pfalse=6
  type=TEST_STRING, tstring=abcd, mtsfalse=6
  type=VAR_WRITE, vwrite=[
    name=x, nr=0, type=NULL
  ]
  type=ALT, altnr=550, afalse=6
  type=JUMP, jump=MISS
]
name=_2const, alternatives=[
  nr=0, parameters=[
    type=ARRAY, marray=[
      variable=[
        name=x, nr=0, type=NULL
      ], type=STRING, string=abcd
      type=STRING, string=e
    ]
  ], anyParm=false, code=[
    operation=VARIABLE, varName=x, varNr=0
  ]
], matching=[
  type=TEST_STACK, tstack=1, tsfalse=10
  type=STACK, stack=1
  type=PARM, parm=0, pfalse=10
  type=STEP, step=START, missed=10
  type=PUSH
  type=MATCH_STRING, mstring=abcd, msfalse=10
  type=VAR_WRITE, vwrite=[
    name=x, nr=0, type=NULL
  ], vwrange=0
  type=POP, popread=false
  type=MATCH_STRING, mstring=e, msfalse=10
  type=ALT, altnr=681, afalse=10
  type=JUMP, jump=MISS
]
name=main, alternatives=[
  nr=0, parameters=[
  ], anyParm=false, code=[
    operation=FUNCTION, function=ADD, fnParm1=[
      operation=CALL, macro={Name=t.assert}, callParms=[
        operation=STRING, string=data
        operation=STRING, string=abcd
        operation=CALL, macro={Name=_1data}, callParms=[
          operation=STRING, string=abcd
        ]
      ]
    ], fnParm2=[
      operation=CALL, macro={Name=t.assert}, callParms=[
        operation=STRING, string=const
        operation=STRING, string=abcd
        operation=CALL, macro={Name=_2const}, callParms=[
          operation=STRING, string=abcde
        ]
      ]
    ]
  ]
], matching=[
  type=TEST_STACK, tstack=0, tsfalse=2
  type=ALT, altnr=859, afalse=2
  type=JUMP, jump=MISS
]
name=slice, alternatives=[
], matching=[
  type=JUMP, jump=MISS
]
name=t.assert, alternatives=[
  nr=0, parameters=[
    variable=[
      name=name, nr=0, type=STRING
    ], type=ANY
    variable=[
      name=should, nr=1, type=NULL
    ], type=ANY
    variable=[
      name=was, nr=2, type=NULL
    ], type=ANY
  ], anyParm=false, code=[
    operation=CONDITION, conExpr=[
      operation=FUNCTION, function=EQ, fnParm1=[
        operation=VARIABLE, varName=should, varNr=1
      ], fnParm2=[
        operation=VARIABLE, varName=was, varNr=2
      ]
    ], conTrue=[
      operation=STRING, string=
    ], conFalse=[
      operation=FUNCTION, function=ADD, fnParm1=[
        operation=FUNCTION, function=ADD, fnParm1=[
          operation=FUNCTION, function=ADD, fnParm1=[
            operation=FUNCTION, function=ADD, fnParm1=[
              operation=FUNCTION, function=ADD, fnParm1=[
                operation=VARIABLE, varName=name, varNr=0
              ], fnParm2=[
                operation=STRING, string= was '
              ]
            ], fnParm2=[
              operation=VARIABLE, varName=was, varNr=2
            ]
          ], fnParm2=[
            operation=STRING, string=' should '
          ]
        ], fnParm2=[
          operation=VARIABLE, varName=should, varNr=1
        ]
      ], fnParm2=[
        operation=STRING, string=
          '
      ]
    ]
  ]
], matching=[
  type=TEST_STACK, tstack=3, tsfalse=4
  type=PARM, parm=0, pfalse=4
  type=TEST_TYPE, ttype=TYPE_STRING, ttfalse=4
  type=ALT, altnr=55, afalse=4
  type=JUMP, jump=MISS
]
