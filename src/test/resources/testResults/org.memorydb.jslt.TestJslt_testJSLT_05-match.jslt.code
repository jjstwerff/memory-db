name=chain, alternatives=[
  nr=0, parameters=[
    variable=[
      name=x, nr=0, type=NULL
    ], type=ARRAY, marray=[
      type=MULTIPLE, mmatch=[
        type=STRING, string=a
      ], mmin=0, mmax=1
      type=MULTIPLE, mmatch=[
        type=STRING, string=b
      ], mmin=0, mmax=1
      type=MULTIPLE, mmatch=[
        type=STRING, string=c
      ], mmin=0, mmax=1
    ]
  ], anyParm=false, code=[
    operation=VARIABLE, varName=x, varNr=0
  ]
], matching=[
  type=TEST_STACK, tstack=1, tsfalse=19
  type=STACK, stack=1
  type=PARM, parm=0, pfalse=19
  type=PUSH
  type=STEP, step=START, missed=16
  type=PUSH
  type=JUMP, jump=CALL, position=10
  type=POP, popread=true
  type=MATCH_STRING, mstring=a, msfalse=16
  type=JUMP, jump=CALL, position=10
  type=PUSH
  type=JUMP, jump=CALL, position=15
  type=POP, popread=true
  type=MATCH_STRING, mstring=b, msfalse=16
  type=JUMP, jump=CALL, position=15
  type=MATCH_STRING, mstring=c, msfalse=16
  type=VAR_WRITE, vwrite=[
    name=x, nr=0, type=NULL
  ], vwrange=3
  type=POP, popread=false
  type=ALT, altnr=1831, afalse=19
  type=JUMP, jump=MISS
]
name=digit, alternatives=[
  nr=0, parameters=[
    variable=[
      name=x, nr=0, type=NULL
    ], type=ANY
  ], anyParm=false, if=[
    operation=FUNCTION, function=AND, fnParm1=[
      operation=FUNCTION, function=GE, fnParm1=[
        operation=VARIABLE, varName=x, varNr=0
      ], fnParm2=[
        operation=STRING, string=0
      ]
    ], fnParm2=[
      operation=FUNCTION, function=LE, fnParm1=[
        operation=VARIABLE, varName=x, varNr=0
      ], fnParm2=[
        operation=STRING, string=9
      ]
    ]
  ], code=[
    operation=VARIABLE, varName=x, varNr=0
  ]
], matching=[
  type=TEST_STACK, tstack=1, tsfalse=2
  type=ALT, altnr=940, afalse=2
  type=JUMP, jump=MISS
]
name=eager, alternatives=[
  nr=0, parameters=[
    variable=[
      name=x, nr=0, type=NULL
    ], type=MULTIPLE, mmatch=[
      type=STRING, string=aab
    ], mmin=0, mmax=-1
  ], anyParm=false, code=[
    operation=VARIABLE, varName=x, varNr=0
  ]
], matching=[
  type=TEST_STACK, tstack=1, tsfalse=9
  type=STACK, stack=1
  type=PARM, parm=0, pfalse=9
  type=STEP, step=START
  type=PUSH
  type=MATCH_STRING, mstring=aab, msfalse=7
  type=JUMP, jump=CONTINUE, position=5
  type=VAR_WRITE, vwrite=[
    name=x, nr=0, type=NULL
  ], vwrange=1
  type=ALT, altnr=1437, afalse=9
  type=JUMP, jump=MISS
]
name=main, alternatives=[
  nr=0, parameters=[
  ], anyParm=false, code=[
    operation=FUNCTION, function=ADD, fnParm1=[
      operation=FUNCTION, function=ADD, fnParm1=[
        operation=FUNCTION, function=ADD, fnParm1=[
          operation=FUNCTION, function=ADD, fnParm1=[
            operation=FUNCTION, function=ADD, fnParm1=[
              operation=FUNCTION, function=ADD, fnParm1=[
                operation=FUNCTION, function=ADD, fnParm1=[
                  operation=FUNCTION, function=ADD, fnParm1=[
                    operation=FUNCTION, function=ADD, fnParm1=[
                      operation=FUNCTION, function=ADD, fnParm1=[
                        operation=FUNCTION, function=ADD, fnParm1=[
                          operation=FUNCTION, function=ADD, fnParm1=[
                            operation=FUNCTION, function=ADD, fnParm1=[
                              operation=CALL, macro={Name=t.assert}, callParms=[
                                operation=STRING, string=2falseStarts
                                operation=BOOLEAN, boolean=true
                                operation=CALL, macro={Name=till}, callParms=[
                                  operation=STRING, string=aaabc
                                ]
                              ]
                            ], fnParm2=[
                              operation=CALL, macro={Name=t.assert}, callParms=[
                                operation=STRING, string=1falseStart
                                operation=BOOLEAN, boolean=true
                                operation=CALL, macro={Name=till}, callParms=[
                                  operation=STRING, string=aabc
                                ]
                              ]
                            ]
                          ], fnParm2=[
                            operation=CALL, macro={Name=t.assert}, callParms=[
                              operation=STRING, string=tail
                              operation=BOOLEAN, boolean=true
                              operation=CALL, macro={Name=till}, callParms=[
                                operation=STRING, string=abc
                              ]
                            ]
                          ]
                        ], fnParm2=[
                          operation=CALL, macro={Name=t.assert}, callParms=[
                            operation=STRING, string=tooMuch
                            operation=NULL
                            operation=CALL, macro={Name=till}, callParms=[
                              operation=STRING, string=abca
                            ]
                          ]
                        ]
                      ], fnParm2=[
                        operation=CALL, macro={Name=t.assert}, callParms=[
                          operation=STRING, string=nothing
                          operation=NULL
                          operation=CALL, macro={Name=till}, callParms=[
                            operation=STRING, string=abbc
                          ]
                        ]
                      ]
                    ], fnParm2=[
                      operation=CALL, macro={Name=t.assert}, callParms=[
                        operation=STRING, string=var
                        operation=STRING, string=a
                        operation=CALL, macro={Name=var}, callParms=[
                          operation=STRING, string=aabc
                        ]
                      ]
                    ]
                  ], fnParm2=[
                    operation=CALL, macro={Name=t.assert}, callParms=[
                      operation=STRING, string=var
                      operation=STRING, string=ab
                      operation=CALL, macro={Name=var}, callParms=[
                        operation=STRING, string=ababc
                      ]
                    ]
                  ]
                ], fnParm2=[
                  operation=CALL, macro={Name=t.assert}, callParms=[
                    operation=STRING, string=digit
                    operation=STRING, string=1
                    operation=CALL, macro={Name=single}, callParms=[
                      operation=STRING, string=1a
                    ]
                  ]
                ]
              ], fnParm2=[
                operation=CALL, macro={Name=t.assert}, callParms=[
                  operation=STRING, string=digits
                  operation=STRING, string=
                  operation=CALL, macro={Name=single}, callParms=[
                    operation=STRING, string=12a
                  ]
                ]
              ]
            ], fnParm2=[
              operation=CALL, macro={Name=t.assert}, callParms=[
                operation=STRING, string=eager
                operation=STRING, string=
                operation=CALL, macro={Name=eager}, callParms=[
                  operation=STRING, string=
                ]
              ]
            ]
          ], fnParm2=[
            operation=CALL, macro={Name=t.assert}, callParms=[
              operation=STRING, string=eager1
              operation=STRING, string=aab
              operation=CALL, macro={Name=eager}, callParms=[
                operation=STRING, string=aab
              ]
            ]
          ]
        ], fnParm2=[
          operation=CALL, macro={Name=t.assert}, callParms=[
            operation=STRING, string=eager2
            operation=STRING, string=aabaab
            operation=CALL, macro={Name=eager}, callParms=[
              operation=STRING, string=aabaab
            ]
          ]
        ]
      ], fnParm2=[
        operation=CALL, macro={Name=t.assert}, callParms=[
          operation=STRING, string=znumber
          operation=STRING, string=123
          operation=CALL, macro={Name=znumber}, callParms=[
            operation=STRING, string=12300
          ]
        ]
      ]
    ], fnParm2=[
      operation=CALL, macro={Name=t.assert}, callParms=[
        operation=STRING, string=chain
        operation=STRING, string=abc
        operation=CALL, macro={Name=chain}, callParms=[
          operation=STRING, string=abc
        ]
      ]
    ]
  ]
], matching=[
  type=TEST_STACK, tstack=0, tsfalse=2
  type=ALT, altnr=2060, afalse=2
  type=JUMP, jump=MISS
]
name=single, alternatives=[
  nr=0, parameters=[
    type=ARRAY, marray=[
      variable=[
        name=x, nr=0, type=NULL
      ], type=MACRO, macro={Name=digit}, mparms=[
      ]
      type=STRING, string=a
    ]
  ], anyParm=false, code=[
    operation=VARIABLE, varName=x, varNr=0
  ]
], matching=[
  type=TEST_STACK, tstack=1, tsfalse=10
  type=STACK, stack=1
  type=PARM, parm=0, pfalse=10
  type=STEP, step=START, missed=10
  type=PUSH
  type=CALL, macro={Name=digit}, parms=[
  ], mfalse=10
  type=VAR_WRITE, vwrite=[
    name=x, nr=0, type=NULL
  ], vwrange=0
  type=POP, popread=false
  type=MATCH_STRING, mstring=a, msfalse=10
  type=ALT, altnr=1225, afalse=10
  type=JUMP, jump=MISS
]
name=slice, alternatives=[
], matching=[
  type=JUMP, jump=MISS
]
name=t.assert, alternatives=[
  nr=0, parameters=[
    variable=[
      name=name, nr=0, type=STRING
    ], type=ANY
    variable=[
      name=should, nr=1, type=NULL
    ], type=ANY
    variable=[
      name=was, nr=2, type=NULL
    ], type=ANY
  ], anyParm=false, code=[
    operation=CONDITION, conExpr=[
      operation=FUNCTION, function=EQ, fnParm1=[
        operation=VARIABLE, varName=should, varNr=1
      ], fnParm2=[
        operation=VARIABLE, varName=was, varNr=2
      ]
    ], conTrue=[
      operation=STRING, string=
    ], conFalse=[
      operation=FUNCTION, function=ADD, fnParm1=[
        operation=FUNCTION, function=ADD, fnParm1=[
          operation=FUNCTION, function=ADD, fnParm1=[
            operation=FUNCTION, function=ADD, fnParm1=[
              operation=FUNCTION, function=ADD, fnParm1=[
                operation=VARIABLE, varName=name, varNr=0
              ], fnParm2=[
                operation=STRING, string= was '
              ]
            ], fnParm2=[
              operation=VARIABLE, varName=was, varNr=2
            ]
          ], fnParm2=[
            operation=STRING, string=' should '
          ]
        ], fnParm2=[
          operation=VARIABLE, varName=should, varNr=1
        ]
      ], fnParm2=[
        operation=STRING, string=
          '
      ]
    ]
  ]
], matching=[
  type=TEST_STACK, tstack=3, tsfalse=4
  type=PARM, parm=0, pfalse=4
  type=TEST_TYPE, ttype=TYPE_STRING, ttfalse=4
  type=ALT, altnr=55, afalse=4
  type=JUMP, jump=MISS
]
name=till, alternatives=[
  nr=0, parameters=[
    type=ARRAY, marray=[
      type=MULTIPLE, mmatch=[
        type=STRING, string=a
      ], mmin=0, mmax=-1
      type=STRING, string=abc
    ]
  ], anyParm=false, code=[
    operation=BOOLEAN, boolean=true
  ]
], matching=[
  type=TEST_STACK, tstack=1, tsfalse=11
  type=PARM, parm=0, pfalse=11
  type=STEP, step=START, missed=11
  type=PUSH
  type=JUMP, jump=CALL, position=8
  type=POP, popread=true
  type=MATCH_STRING, mstring=a, msfalse=11
  type=JUMP, jump=CONTINUE, position=3
  type=MATCH_STRING, mstring=abc, msfalse=11
  type=STACK, stack=1
  type=ALT, altnr=550, afalse=11
  type=JUMP, jump=MISS
]
name=var, alternatives=[
  nr=0, parameters=[
    type=ARRAY, marray=[
      variable=[
        name=x, nr=0, type=NULL
      ], type=MULTIPLE, mmatch=[
        type=ANY
      ], mmin=0, mmax=-1
      type=STRING, string=abc
    ]
  ], anyParm=false, code=[
    operation=VARIABLE, varName=x, varNr=0
  ]
], matching=[
  type=TEST_STACK, tstack=1, tsfalse=16
  type=STACK, stack=1
  type=PARM, parm=0, pfalse=16
  type=STEP, step=START, missed=16
  type=PUSH
  type=PUSH
  type=JUMP, jump=CALL, position=11
  type=POP, popread=true
  type=STEP, step=FORWARD, missed=16
  type=STEP, step=FORWARD, missed=16
  type=JUMP, jump=CONTINUE, position=5
  type=VAR_WRITE, vwrite=[
    name=x, nr=0, type=NULL
  ], vwrange=0
  type=POP, popread=false
  type=POP, popread=false
  type=MATCH_STRING, mstring=abc, msfalse=16
  type=ALT, altnr=728, afalse=16
  type=JUMP, jump=MISS
]
name=znumber, alternatives=[
  nr=0, parameters=[
    type=ARRAY, marray=[
      variable=[
        name=x, nr=0, type=NULL
      ], type=MULTIPLE, mmatch=[
        type=MACRO, macro={Name=digit}, mparms=[
        ]
      ], mmin=0, mmax=-1
      type=STRING, string=00
    ]
  ], anyParm=false, code=[
    operation=VARIABLE, varName=x, varNr=0
  ]
], matching=[
  type=TEST_STACK, tstack=1, tsfalse=16
  type=STACK, stack=1
  type=PARM, parm=0, pfalse=16
  type=STEP, step=START, missed=16
  type=PUSH
  type=PUSH
  type=JUMP, jump=CALL, position=11
  type=POP, popread=true
  type=CALL, macro={Name=digit}, parms=[
  ], mfalse=16
  type=STEP, step=FORWARD, missed=16
  type=JUMP, jump=CONTINUE, position=5
  type=VAR_WRITE, vwrite=[
    name=x, nr=0, type=NULL
  ], vwrange=0
  type=POP, popread=false
  type=POP, popread=false
  type=MATCH_STRING, mstring=00, msfalse=16
  type=ALT, altnr=1585, afalse=16
  type=JUMP, jump=MISS
]
