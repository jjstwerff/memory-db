name=main, alternatives=[
  nr=0, parameters=[
  ], anyParm=false, code=[
    operation=FUNCTION, function=ADD, fnParm1=[
      operation=FUNCTION, function=ADD, fnParm1=[
        operation=FUNCTION, function=ADD, fnParm1=[
          operation=FUNCTION, function=ADD, fnParm1=[
            operation=FUNCTION, function=ADD, fnParm1=[
              operation=FUNCTION, function=ADD, fnParm1=[
                operation=FUNCTION, function=ADD, fnParm1=[
                  operation=FUNCTION, function=ADD, fnParm1=[
                    operation=FUNCTION, function=ADD, fnParm1=[
                      operation=FUNCTION, function=ADD, fnParm1=[
                        operation=FUNCTION, function=ADD, fnParm1=[
                          operation=FUNCTION, function=ADD, fnParm1=[
                            operation=CALL, macro={Name=t.assert}, callParms=[
                              operation=STRING, string=match
                              operation=NUMBER, number=1
                              operation=CALL, macro={Name=numb}, callParms=[
                                operation=ARRAY, array=[
                                  operation=NUMBER, number=1
                                  operation=NUMBER, number=2
                                ]
                              ]
                            ]
                          ], fnParm2=[
                            operation=CALL, macro={Name=t.assert}, callParms=[
                              operation=STRING, string=two
                              operation=NULL
                              operation=CALL, macro={Name=numb}, callParms=[
                                operation=ARRAY, array=[
                                  operation=NUMBER, number=1
                                  operation=BOOLEAN, boolean=true
                                  operation=NUMBER, number=2
                                ]
                              ]
                            ]
                          ]
                        ], fnParm2=[
                          operation=CALL, macro={Name=t.assert}, callParms=[
                            operation=STRING, string=remaining
                            operation=NULL
                            operation=CALL, macro={Name=numb}, callParms=[
                              operation=ARRAY, array=[
                                operation=NUMBER, number=1
                                operation=NUMBER, number=2
                                operation=NUMBER, number=3
                              ]
                            ]
                          ]
                        ]
                      ], fnParm2=[
                        operation=CALL, macro={Name=t.assert}, callParms=[
                          operation=STRING, string=other
                          operation=NULL
                          operation=CALL, macro={Name=numb}, callParms=[
                            operation=NUMBER, number=2
                          ]
                        ]
                      ]
                    ], fnParm2=[
                      operation=CALL, macro={Name=t.assert}, callParms=[
                        operation=STRING, string=string
                        operation=STRING, string=a
                        operation=CALL, macro={Name=str}, callParms=[
                          operation=STRING, string=a2
                        ]
                      ]
                    ]
                  ], fnParm2=[
                    operation=CALL, macro={Name=t.assert}, callParms=[
                      operation=STRING, string=two tokens
                      operation=NULL
                      operation=CALL, macro={Name=str}, callParms=[
                        operation=STRING, string=ab2
                      ]
                    ]
                  ]
                ], fnParm2=[
                  operation=CALL, macro={Name=t.assert}, callParms=[
                    operation=STRING, string=double tokens
                    operation=NULL
                    operation=CALL, macro={Name=str}, callParms=[
                      operation=STRING, string=a22
                    ]
                  ]
                ]
              ], fnParm2=[
                operation=CALL, macro={Name=t.assert}, callParms=[
                  operation=STRING, string=not full string
                  operation=NULL
                  operation=CALL, macro={Name=str}, callParms=[
                    operation=STRING, string=a2a
                  ]
                ]
              ]
            ], fnParm2=[
              operation=CALL, macro={Name=t.assert}, callParms=[
                operation=STRING, string=second
                operation=ARRAY, array=[
                  operation=NUMBER, number=1
                  operation=NUMBER, number=2
                ]
                operation=CALL, macro={Name=second}, callParms=[
                  operation=ARRAY, array=[
                    operation=NUMBER, number=2
                    operation=NUMBER, number=1
                    operation=NUMBER, number=2
                  ]
                ]
              ]
            ]
          ], fnParm2=[
            operation=CALL, macro={Name=t.assert}, callParms=[
              operation=STRING, string=strsec
              operation=ARRAY, array=[
                operation=NUMBER, number=1
                operation=NUMBER, number=2
              ]
              operation=CALL, macro={Name=strsec}, callParms=[
                operation=ARRAY, array=[
                  operation=STRING, string=2
                  operation=NUMBER, number=1
                  operation=NUMBER, number=2
                ]
              ]
            ]
          ]
        ], fnParm2=[
          operation=CALL, macro={Name=t.assert}, callParms=[
            operation=STRING, string=exact str
            operation=STRING, string=
            operation=CALL, macro={Name=strsec}, callParms=[
              operation=STRING, string=2
            ]
          ]
        ]
      ], fnParm2=[
        operation=CALL, macro={Name=t.assert}, callParms=[
          operation=STRING, string=exact str
          operation=STRING, string=abc
          operation=CALL, macro={Name=strsec}, callParms=[
            operation=STRING, string=2abc
          ]
        ]
      ]
    ], fnParm2=[
      operation=CALL, macro={Name=t.assert}, callParms=[
        operation=STRING, string=exact array
        operation=NULL
        operation=CALL, macro={Name=strsec}, callParms=[
          operation=ARRAY, array=[
            operation=STRING, string=2
          ]
        ]
      ]
    ]
  ]
], matching=[
  type=TEST_STACK, tstack=0, tsfalse=3
  type=ALT, altnr=1237, afalse=3
  type=ERROR, error=No matching macro named 'main' found, efrom=0, etill=0
]
name=numb, alternatives=[
  nr=0, parameters=[
    type=ARRAY, marray=[
      variable=[
        name=a, nr=0, multiple=false, type=NULL
      ], type=ANY
      type=NUMBER, number=2
    ]
  ], anyParm=false, code=[
    operation=VARIABLE, varName=a, varNr=0
  ]
], matching=[
  type=TEST_STACK, tstack=1, tsfalse=6
  type=STACK, stack=1
  type=TEST_TYPE, ttype=TYPE_ARRAY, ttfalse=6
  type=TEST_NUMBER, mnumber=2, mnfalse=6
  type=ALT, altnr=553, afalse=6
  type=ERROR, error=No matching macro named 'numb' found, efrom=0, etill=0
]
name=second, alternatives=[
  nr=0, parameters=[
    type=ARRAY, marray=[
      type=NUMBER, number=2
      variable=[
        name=a, nr=0, multiple=false, type=NULL
      ], type=ANY
    ]
  ], anyParm=false, code=[
    operation=VARIABLE, varName=a, varNr=0
  ]
], matching=[
  type=TEST_STACK, tstack=1, tsfalse=6
  type=STACK, stack=1
  type=TEST_TYPE, ttype=TYPE_ARRAY, ttfalse=6
  type=TEST_NUMBER, mnumber=2, mnfalse=6
  type=ALT, altnr=913, afalse=6
  type=ERROR, error=No matching macro named 'second' found, efrom=0, etill=0
]
name=slice, alternatives=[
], matching=[
  type=ERROR, error=No matching macro named 'slice' found, efrom=0, etill=0
]
name=str, alternatives=[
  nr=0, parameters=[
    type=ARRAY, marray=[
      variable=[
        name=a, nr=0, multiple=false, type=NULL
      ], type=ANY
      type=STRING, string=2
    ]
  ], anyParm=false, code=[
    operation=VARIABLE, varName=a, varNr=0
  ]
], matching=[
  type=TEST_STACK, tstack=1, tsfalse=6
  type=STACK, stack=1
  type=TEST_TYPE, ttype=TYPE_ARRAY, ttfalse=6
  type=TEST_STRING, mstring=2, msfalse=6
  type=ALT, altnr=733, afalse=6
  type=ERROR, error=No matching macro named 'str' found, efrom=0, etill=0
]
name=strsec, alternatives=[
  nr=0, parameters=[
    type=ARRAY, marray=[
      type=STRING, string=2
      variable=[
        name=a, nr=0, multiple=false, type=NULL
      ], type=ANY
    ]
  ], anyParm=false, code=[
    operation=VARIABLE, varName=a, varNr=0
  ]
], matching=[
  type=TEST_STACK, tstack=1, tsfalse=6
  type=STACK, stack=1
  type=TEST_TYPE, ttype=TYPE_ARRAY, ttfalse=6
  type=TEST_STRING, mstring=2, msfalse=6
  type=ALT, altnr=1075, afalse=6
  type=ERROR, error=No matching macro named 'strsec' found, efrom=0, etill=0
]
name=t.assert, alternatives=[
  nr=0, parameters=[
    variable=[
      name=name, nr=0, multiple=false, type=STRING
    ], type=ANY
    variable=[
      name=should, nr=1, multiple=false, type=NULL
    ], type=ANY
    variable=[
      name=was, nr=2, multiple=false, type=NULL
    ], type=ANY
  ], anyParm=false, code=[
    operation=CONDITION, conExpr=[
      operation=FUNCTION, function=EQ, fnParm1=[
        operation=VARIABLE, varName=should, varNr=1
      ], fnParm2=[
        operation=VARIABLE, varName=was, varNr=2
      ]
    ], conTrue=[
      operation=STRING, string=
    ], conFalse=[
      operation=FUNCTION, function=ADD, fnParm1=[
        operation=FUNCTION, function=ADD, fnParm1=[
          operation=FUNCTION, function=ADD, fnParm1=[
            operation=FUNCTION, function=ADD, fnParm1=[
              operation=FUNCTION, function=ADD, fnParm1=[
                operation=VARIABLE, varName=name, varNr=0
              ], fnParm2=[
                operation=STRING, string= was '
              ]
            ], fnParm2=[
              operation=VARIABLE, varName=was, varNr=2
            ]
          ], fnParm2=[
            operation=STRING, string=' should '
          ]
        ], fnParm2=[
          operation=VARIABLE, varName=should, varNr=1
        ]
      ], fnParm2=[
        operation=STRING, string=
          '
      ]
    ]
  ]
], matching=[
  type=TEST_STACK, tstack=3, tsfalse=5
  type=PARM, parm=0, pfalse=5
  type=TEST_TYPE, ttype=TYPE_STRING, ttfalse=5
  type=ALT, altnr=55, afalse=5
  type=ERROR, error=No matching macro named 't.assert' found, efrom=0, etill=0
]
