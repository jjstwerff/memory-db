Tests:
- array of tokens into parameter
- part of choice into parameter
- part after choice into parameter
- optional part after choice into parameter
- multiple tokens into a parameter
- other function result into a parameter
- multiple function results into a parameter

Analyze:
- brackets
	number of current POP's on inner function (parameter with this number?)
- better code for max-n iterations
	remove a recently written element again if a matching did not work out in the end
	create method to remove the last value from an array again
	allow for a part of code to be executed on failure to match
- allow constant n iterations code with counter
	add a way to note that
- use COUNTER to remember if a new array is started when that is optionally done
	validate the end of the array too in this situation
- add code to force a step into an array element (string inside an array or a sub array)
	start a new array [] versus a new plus operator
	create a flag on arrays to indicate the difference
- redefine predefined macros (i.e. number)
	this should be an error

Notes: (for projects including code and data)
- person (name)
- text (bullets, numbers, links, bold, italic, underline, strike, symbols)
- code (title, content, language, ordering, definitions(globals/tables/fields/macros))
- tag (name)
- priority (level(number of days till needed), tags, done[yes, no])
- note (title, text, type, priority)
- cell (position, text)
- line (definition, cells)
- type (name, priority)
- table (title, lines, type, priority, description)
- image (title, content, description, type, priority)
- lines (position, directed[yes, no])
- positions (link, x, y, lines, opened[full, partial, closed])
- selection (position)
- page (title, positions, selections, description, type, priority)
- link (type[table, note, image, page], opened[full, partial, closed], position[left, right, float, center])
TODO: UUID & persons & deleted flag & old version of texts = difference to current version
TODO: allow to export notes to a database for 'real' use
TODO: allow to export code to a project & read back changes
TODO: allow for calculations (also inside text/code) and following of relations

Code generation:
	less object cast warnings in meta & world database

MatchMacro:
- STEP:FINISH could be written as STEP:FORWARD with a jump if needed
- new STEP:LAST / STEP:FIRST should be written to accommodate matching the rest of the data
- implement type validation & content validation on RecordImplementation type data
	tests increment the pointers when inside array/object
	when test is only a type do not increment??
- STACK.. when positive: remember position & allocate room:
	keep separate stack position for original parameters
	free when negative, separate code needed for nextAlternative to free previously needed stack space
		also free after a support function is called: "pointer" parameter with the moving of the call pointer
	also create this code for nextAlternative when there is no error
- validate that the stack is empty when no error is thrown
- implement matching stack push / pop
	validate that each element in a RecordImplementation
	only a stack of objects, each split-off is a new object.. copy of current
- implement call to function as validation
	increment array on true
- implement variable write with element
	output current element or range between top element on stack and current element
	next element on write
- read the current field name into cur

Fix more unit tests.. evaluate all of the Failing ones

Make the language usable:
- add test with multilevel ADD / SUB between trees ... generic matches / conditional matches
- add database & language integration tests:
	. read from a pre-filled database
	. add to a database array
	. change the content of a field of an object
	. replace a whole array
	. replace a whole object
	. remove a specific element from an array
	. remove a field from an object
- start using Jetty:
	. normal http requests
	. web socket communication
	. read only database (partial) & player owned data
	. actors actions inside threads (including players)
	. world state handling in main thread (lock clients for now)
	. new world state in copy world database to prevent client locks (new file & load before alterations)

Fixes on database code generation:
- special index field types (int) also possible as index(int val) to prevent unneeded conversions
- implement prev() method
	create slice implementation for this
- fix language tests
	add non-boxing methods for language
	create non-boxing (long) stack for language.. pointer to data is long with the 2 positions
- array names duplicates
	automatic name of the record where it is used & name of parameter
	possibly add numbers when more than one 
- error on record without place in the structure (no index, no parent)
- add unit tests for edge cases
	parsing of database data from text
	writing of data into the database from the language + possible errors
	world data & generate & checks on it
- deletes of records
	verify to not add deleted records to indexes
	test remove all top level objects & verify everything is deleted

Rewrite various classes that depend too much on index(int idx)

Structure notation in language:
- notation for key / mandatory fields
- link between conditional field definition and optional field list
- explicit documentation on fields / tables


Testing:
- iterator matching:
	detection of recursion (calls of functions on the same iterators) & array / object result:
		create a lazy implementation: array + recursion -> internal array with original position & length & expression
		indicate this finding in alternative type
	if no constant is given: iterate for each element on the array... otherwise return sub arrays
- error reporting / logging:
	how to report on a syntax error for a parser.. current position: (line, character) + message
	use in a global with the error or instead of the tree = could have been partially parsed already
	introduce global variables.. changing their value via setter function call?
	report error as result when it was encountered
	logging to UDP port 514, TCP 514
- in generated code.. skip memory function of above objects when possible (used only in iterator context)
- array analysis
	logic: main expression & remember list
	link each expression to the InterFor in array & calculate the values
		fill array with elements
	calculate each expressions the same time? 
- database reading in JSTL ..
	database with table definitions? current 3 structures in database format
	allow included record
	add calculated fields:
		record type (MAIN, SUB, ARRAY)
		record free room in bits
		record size in bits
		field relation (child, deep)
		array relation
		size of fields in bits
		position of fields in record in bits
		java type of field
		default expression of field
		getter name of field (camel case & is for boolean) 
		setter name of field (camel case)
		null check expressions
		null value expressions
		is byte aligned
		indexes on the current record:
			index holding record expression
			ordering expressions
		array of places were an array is used
		code in parent/main record to remove relations to deleted array record
	including validation checks:
		incorrect pack name
		incorrect directory name
		not used record (as MAIN, SUB, ARRAY or INCLUDE)
		double used record (as SUB, not as ARRAY or INCLUDE)
		sub record without key field
		key fields with conditions
		incorrect key fields type (INDEX, INCLUDE, SUB)
		incorrect mandatory field type (INDEX, INCLUDE)
		not enumerate condition field (not an ENUMERATE)
		condition without conditionField
		invalid condition value
		incorrect type default value
		double values in ENUMERATE fields
		incorrect enumerate value (not upper case, start with number, space, token)
		incorrect format string
		incorrect maximum
		incorrect minimum
		incorrect decimals
		relation to array record
		relation to main record
		key is already mandatory
		invalid condition field
		incorrect order field
		double order field
		scattered condition fields
		incorrect index (not from main record or parent)
		only relation from main or parent record to array element
		incorrect name of field (empty, start with number, started with upper case, space, token)
		incorrect name of record (empty, start with number, started with lower case, space, token)
		reserved field name (store, upRecord, size, rec, arrayIndex, class)
		double record name
		double field name
		mandatory field with default
		empty description
	java code generation via JSTL
- output:
	first layout: {keys} and escaping for the proper length .. now inspect strings on multiple-line	
	layout of keys .. inner keys should also be correctly shown
- Meta format:
	always claim main record in Store, no claimed indexes
	make index to array possible: position in array as data, for now no combination of relation & position possible
	relation to array value: position of array & register it for removal .. only from parent
- minimal tests for each validation check and each calculated field
- separate layer for JSON data to still allow for code generated lower levels
- better errors on getting fields from array without index
- remove as many reserved field names as possible
- algorithm to remove relations on deletes of records
	more efficient when indexes exist

Optimizations:
	stack optimizations (stack of objects with pointers inside the original objects)
	introduce lazy evaluation version of FOR when possible
	rewrite MAP as FOR statement & remove old implementation
	rewrite FILTER as FOR statement & remove old implementation
	rewrite LENGTH as FOR statement & internal .size() operation & remove old implementation
	rewrite SLICE as FOR statement & remove old implementation
	rewrite object ADD as FOR statement on fields
	rewrite array operation EQ, NE, LT, GT as FOR statements on arrays
	rewrite string operation EQ, NE, LT, GT, SLIC, LENGTH as FOR statements on strings
	introduce SPLIT as FOR statements on strings
	introduce MAX, MIN, SUM, AVG, STD_DEV as FOR statements
	try to combine evaluation of these FOR statements .. same identity of iterators
		possibly implementation in macros

JSLT:
- write set of files from output = [ { path, content, problems? } ]
- allow simple type casting via macro parameters (long -> double)
- add more type information from expressions
- object unwinding in macro definitions

- add * to jpath ... only 1 level object
- add [*] to jpath .. only 1 level array
- add .. to jpath .. possibly more than 1 level
- allow date layout & align
- documentation of RecordInterface, ChangeInterface
- output from a script can define the input of another script
- sync back to database
- introduce local variables
- global named definitions.. possibly from context

TODO:
- introduce indexes as RadixTrees.
- spatial layouts:
	bounding boxes with content boxes
	QuadTree = split space in two in different dimensions.. allow empty elements that do not split
	Radix tree with bits interleaved between dimensions
- unit test deletes
- Clear current ARRAY values when parsing them from data
- Correct parser of multi-layered Relations: unit-test them
	test changes to indexes due to change of relation
		reuse the Change<Record> if possible and start a new one when not.. find correct check for it
	write new unittest to validate index positions after relation change

- validate that each record is linked somewhere:
	has it's own index
	or has a parent record
	or is in use as an Array record
	more information in Index definition: primary
- allow min/max/undefined fields on numbers and use only needed bits
- more compact records by defer bit packing to later.. an lowest number of bits at last
- allow fields that point to the same ARRAY record definition to have the same name
    or at least error on the occurrence
- correct Store use:
	show number of top level indexes.. claim space for them in Store
- validate writing escaped data into multi-line strings.. do not escape , or } or /n but do the rest
	more efficient code to write data.. do not try to fined \t or , tokens in each string that cannot contain them
- pure memory-map version for store.strings UTF8 for efficiency
- free-space maintenance thread:
	start new toFree index for continued functionality but keep top for current loop
	iterate through whole structure & set pointers to free objects to actually null
		use output routine with a custom Writer that un-sets pointers to freed records
	move toFree records on the working list to actual free records
	combine freed spaces
- document all public classes and methods.

- implement a session that stores the internal records in a malloc space and writes them to the real store on commit
	test the commit on a simple case
	test a single index that can hold new, changed and old records
	test the same data after a commit
	test removed records
	negative record numbers indicate a session store
	test writing the session change data to string
	test reading this session data into a separate database
- implement a multi-layered session that commits on the lower one
	allow second level session stores where the most upper bit is the store indicator

- new SUB type: as related record field.. keep space of whole record on parent
- optional fields linked with single enumerate value
	during claim keep structure of all free bits instead of 1 position
- create JSON writer/parser back-end
- write general JSON data parser into the database.. use this to write parser from JSON

- luxe iterator:
	prevent showing mutated records that get inserted after the current
		IntSet of records that are changed.. do not show them again
    concurrent modifications
    	modCount on structure.. 
    		only position is next to top.. only on set and let indexes point to the same number
    		optional (unit-test environment)
    		optional inside store.. more strict but functional
    	insert/delete/clear/resize increases modCount
    	iterator remembers initial modCount & remembers on own remove

- later in array:
	remove().. move records internally & lower size
	remove(index).. move records internally & lower size
	add(index).. create space of number of records


*** further development ***
- Reader using the own type data structures

- unit test on server: for now only in unit test environment
	define unit test structure
		test.. input & output & changes
		input
			data: datafile in multiline string = input
			session(moment, label)
			commit
			read: path to element = output
				$.store.book[0].title
				path + * for all children
				path + [state=text,name>123]: filter in path: 'and' / 'or' / '<=' / 'like()' / [0] = first / [-1] = last / [-3:-1]: last 3
			json output/input.. json templates:
				element = $[path]
				for-each(path + filter)
				for-each(path + filter, sort)
				if (filter) .. else .. 
				macro
				var(name, path)
			data change through input.. checks
	return record structure
	return record data
	change record in session & validate that indexes return the last version
	show changes
	add record
	validate that the new record is returned in the indexes
	delete record
	validate that this record is removed from the indexes
	sort records
	page records
	filter records

- transaction session:
	verify
		temporary copy of mapping
		verify session store
		loop session in logical order
			validate existence in mapping of change/delete records
		remove remainder mappings

- validate actual number of objects created: verify JAVA-8 on stack objects
	jmap -dump:format=b,file=cheap.bin <pid>
	jhat
