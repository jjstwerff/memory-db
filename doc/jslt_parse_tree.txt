store Jslt {
	[Source(name)] sources,
	[Macro(name)] macros }

Jslt.Source {
	string name }

Jslt.Macro {
	string name,
	[Alternative] alternatives,
	[MatchStep] matching }

Jslt.Alternative {
	[Match] parameters,
	boolean anyParm "match any remaining parameters after the given set",
	Expr if,
	[Expr] code }

Jslt.ResultType {
	enumerate[array, boolean, float, number, null, object, string, structure] type,
	string record }

Jslt.Expr: ResultType {
	enumerate[function, condition, number, float, string, array, object, boolean, append, null, call, filter, sort, if, current, running, read,
		variable] operation,
	?function { enumerate[neg, add, min, mul, div, mod, pow, eq, ne, lt, gt, le, ge, and, or, not, first, last, index, length, number,
			float, string, boolean, name, type, element, per, for, each, layout] function, Expr fnParm1, Expr fnParm2 }
	?condition { Expr conExpr, Expr conTrue, Expr conFalse },
	?number { number number },
	?float { float float },
	?string { string string },
	?array { [Expr] array },
	?append { [Expr] append },
	?object { [Field] object },
	?boolean { boolean boolean },
	?call { relation[Macro] macro, [Expr] callParms },
	?filter { Expr filter, boolean filterDeep, Expr filterExpr },
	?sort { Expr sort, [Expr] sortParms },
	?if { Expr if, [Expr] ifTrue, [Expr] ifFalse }, 
	?read { Source listen },
	?variable { string varName, int32 varNr } }

Jslt.Field: Expr {
	Expr name }

Jslt.Variable: ResultType {
	string name,
	int32 nr,
	boolean multiple }

Jslt.Match {
	Variable variable,
	enumerate[any, array, boolean, null, float, number, string, object, constant, macro, multiple] type,
	?array { [Match] marray },
	?boolean { boolean boolean },
	?float { float float },
	?number { number number },
	?string { string string },
	?object { [MatchField] mobject },
	?constant { string cparm, int32 constant } "then current parameter should hold the same value as the specified parameter",
	?macro { Macro macro, [Expr] mparms },
	?multiple { Match mmatch, int8 mmin, int8 mmax } }

Jslt.MatchField: Match {
	string name }

Jslt.MatchStep {
	enumerate[stack, parm, field, alt, test_call, jump, test_stack, test_boolean, test_string, test_number, test_float, test_type,
		pos_keep, pos_free, pos_to, var_write, var_start, var_add, error] type,
	?stack { int32 stack } "increase or decrease the stack frame (variables/call)",
	?parm { int32 parm, int32 pfalse } "increase or decrease the stack frame (variables/call)",
	?field { string field, int32 ffalse } "switch to a specific field",
	?alt { int32 altnr, int32 afalse, Variable avar } "record Id of Alternative, perform if-condition & calculate, result into avar",
	?test_stack { int32 tstack, int32 fsfalse } "test the number of elements on the stack",
	?test_call { Macro tmacro, int32 tfalse } "current element as extra parameter",
	?jump { int32 jump } "continue at a specific location",
	?test_boolean { boolean mboolean, int32 mbfalse },
	?test_string { string mstring, int32 msfalse },
	?test_number { number mnumber, int32 mnfalse },
	?test_float { float mfloat, int32 mffalse },
	?test_type { enumerate[type_null, type_boolean, type_string, type_number, type_float, type_array, type_object] ttype, integr ttfalse },
	?pos_to { int32 pto } "jump back to a specific position on a parameter",
	?var_write { Variable vwrite, int32 vwfrom, int32 vwtill } "write to a variable",
	?var_start { Variable vstart } "start a new variable as an array",
	?var_add { Variable vadd, int32 vafrom, int32 vatill } "add a new element to a variable",
	?error { string error, int32 efrom, int32 etill } "write a specific error text" }
